#!/usr/bin/env python3

# Copyright (C) Arthur Reutenauer 3 April 2020
# MIT licence (https://opensource.org/licenses/MIT)

from hyphenator import Hyphenator
from nltk.grammar import CFG
from nltk.parse.generate import generate
from os.path import join as joinpath
from pathlib import Path
from requests import get as httpget
import tarfile
from tempfile import TemporaryDirectory
from time import sleep
from xml.etree import ElementTree as ET

# Downloading the dictionary from Kotus if it’ not in the working directory.
dictfname = 'kotus-sanalista_v1/kotus-sanalista_v1.xml'
hyphfname = 'tex/hyph-fi-x-basic.pat.txt'
if not Path(dictfname).exists():
  print('Fetching Kotus’ word list ...')
  response = httpget('http://kaino.kotus.fi/sanat/nykysuomi/kotus-sanalista-v1.tar.gz')

  with TemporaryDirectory() as tempdir:
    tarfname = joinpath(tempdir, 'dict.tar.gz')
    with open(tarfname, 'wb') as tarf:
      tarf.write(response.content)
    tar = tarfile.open(tarfname, 'r:gz')
    print('  Extracting ...')
    dictfcontents = tar.extractfile(dictfname)
    with open(dictfname, 'wb') as dictf:
      dictf.write(dictfcontents.read())
      print('  Done.')

# Generate the patterns from a context-free grammar.
pattern_grammar = CFG.fromstring("""
  S -> '1' K V | V '1' V | DOTKK | REST
  V -> 'a' | 'e' | 'i' | 'o' | 'u' | 'y' | 'ä' | 'ö'
  K -> OBSTRUENT | LIQUID | SIBILANTS | NASALS | GLIDES | 'v' | 'w'
  OBSTRUENT -> 'b' | 'c' | 'd' | 'f' | 'g' | 'k' | 'p' | 'q' | 't'
  LIQUID -> 'l' | 'r'
  NASALS -> 'm' | 'n'
  GLIDES -> 'h' | 'j'
  SIBILANTS -> 's' | 'š' | 'z' | 'ž'
  DOTKK -> '.' OBSTRUENT '2' LIQUID '2' \
    | '.c2h' \
    | '.d2ž' \
    | '.g2h' \
    | '.g2n' \
    | '.k2h2' \
    | '.k2n' \
    | '.k2s' \
    | '.k2v' \
    | '.p2h' \
    | '.p2n' \
    | '.p2s' \
    | '.p2t2' \
    | '.r2h' \
    | '.s2c2' \
    | '.s2f' \
    | '.s2h' \
    | '.s2k2' \
    | '.s2l' \
    | '.s2m' \
    | '.s2n' \
    | '.s2p2' \
    | '.s2q' \
    | '.s2t2' \
    | '.s2v' \
    | '.s2w' \
    | '.t2h2' \
    | '.t2s' \
    | '.t2v' \
    | '.t2w' \
    | '.t2š' \
    | '.w2h' \
    | '.z2l'
  REST -> '.d2na' | '.l2vi' \
    | 'a1ii' | 'a1uu' \
    | 'e1ii' | 'e1uu' | 'e1yy' \
    | 'i1ee' | 'i1uu' | 'i1yy' \
    | 'o1ii' | 'o1uu' \
    | 'u1ii' | 'u1oo' \
    | 'y1ii' | 'y1öö' \
    | 'ä1ii' | 'ä1yy' \
    | 'ö1ii' | 'ö1yy' \
    | 'aa1i' | 'aa1u' \
    | 'ee1i' | 'ee1u' | 'ee1y' \
    | 'ii1e' | 'ii1u' | 'ii1y' \
    | 'oo1i' | 'oo1u' \
    | 'uu1i' | 'uu1o' \
    | 'yy1i' | 'yy1ö' \
    | 'ää1i' | 'ää1y' \
    | 'öö1i' | 'öö1y' \
    | 'ai1e' | 'ai1u' | 'ai1y' \
    | 'iu1o' \
    | 'oi1e' \
    | 'uo1u'
""")

level2_grammar = CFG.fromstring("""
  S -> VV | D
  VV -> 'a1a' | 'e1e' | 'i1i' | 'o1o' | 'u1u' | 'y1y' | 'ä1ä' | 'ö1ö'
  D -> 'a1i' | 'e1i' | 'o1i' | 'ä1i' | 'ö1i' | 'e1y' | 'ä1y' | 'ö1y' | 'a1u' | 'e1u' | 'o1u' | 'u1i' | 'y1i' | 'i1u' | 'i1y' | 'i1e' | 'u1o' | 'y1ö'
""")

# sr and zr don’t appear at the beginning of words, OBSTRUENT LIQUID is still a good approximation.

level1_patterns = set(''.join(rule) for rule in generate(pattern_grammar))
level2_patterns = set(''.join(rule) for rule in generate(level2_grammar))
patterns = sorted(level1_patterns - level2_patterns)
# Generating the patterns
print('Generating patterns ...')
with open(hyphfname, 'w') as pattfile:
  pattfile.write("UTF-8\n")
  for patt in patterns:
    pattfile.write(''.join(patt))
    pattfile.write("\n")

# Hyphenate the word list
print('Hyphenating the word list ...')
hyphenator = Hyphenator(hyphfname, 1, 1)
lexicon = ET.parse(dictfname)
with open('list/hyphenated.txt', 'w') as listfile:
  for node in lexicon.getroot():
    # TODO Add all flexion
    sana = node[0].text
    pos = hyphenator.positions(sana)
    letters = [('-' if i in pos and sana[i-1] != '-' and sana[i-1] != ' ' else '') + sana[i] for i in range(len(sana))]
    hyphenated = ''.join(letters)
    # print(hyphenated)
    listfile.write(''.join(hyphenated))
    listfile.write("\n")
